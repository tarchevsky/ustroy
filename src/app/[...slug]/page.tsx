import { Metadata } from 'next'
import { notFound } from 'next/navigation'

import CategoryPage from '@/components/CategoryPage'
import CategoryPostPage from '@/components/CategoryPostPage'
import WpPageComponent from '@/components/WpPageComponent'
import { getApolloClient } from '@/lib/apollo-client'
import {
  fetchAllCategories,
  fetchCategoryWithChildren,
} from '@/services/pageService'
import { fetchPageBySlug } from '@/services/pagesService'

interface PageProps {
  params: {
    slug: string[]
  }
}

export const revalidate = 3600

const getClient = () => getApolloClient()

export async function generateMetadata({
  params,
}: PageProps): Promise<Metadata> {
  const { slug } = params
  if (!slug || slug.length === 0) {
    return {
      title: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
      description: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
    }
  }

  const apolloClient = getClient()
  const path = slug.join('/')

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WordPress (–æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç)
  if (slug.length === 1) {
    const pageData = await fetchPageBySlug(apolloClient, slug[0])
    if (pageData) {
      return {
        title: pageData.seo?.title || pageData.title,
        description: pageData.seo?.metaDesc || `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageData.title}`,
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏
    const categoryData = await fetchCategoryWithChildren(apolloClient, slug[0])
    if (categoryData) {
      return {
        title: categoryData.seo?.title || categoryData.name,
        description:
          categoryData.seo?.metaDesc || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryData.name}`,
      }
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
  if (slug.length === 2) {
    const categoryData = await fetchCategoryWithChildren(apolloClient, slug[1])
    if (categoryData) {
      return {
        title: categoryData.seo?.title || categoryData.name,
        description:
          categoryData.seo?.metaDesc || `–ö–∞—Ç–µ–≥–æ—Ä–∏—è ${categoryData.name}`,
      }
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç (—Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ—Å—Ç)
  if (slug.length === 3) {
    // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ—Å—Ç–æ–≤
    return {
      title: '–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
      description: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø–æ—Å—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
    }
  }

  return {
    title: '–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
    description: '–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
  }
}

const DynamicPage = async ({ params }: PageProps) => {
  const { slug } = params
  if (!slug || slug.length === 0) {
    notFound()
  }

  const apolloClient = getClient()
  const path = slug.join('/')

  console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π –ø—É—Ç—å:', path, 'slug:', slug)

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WordPress (–æ–¥–∏–Ω —Å–µ–≥–º–µ–Ω—Ç)
  if (slug.length === 1) {
    const pageData = await fetchPageBySlug(apolloClient, slug[0])
    if (pageData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ WordPress:', pageData.title)
      return <WpPageComponent pageData={pageData} />
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏
    const categoryData = await fetchCategoryWithChildren(apolloClient, slug[0])
    if (categoryData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏:', categoryData.name)
      return <CategoryPage categoryData={categoryData} />
    }
  }

  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é (–¥–≤–∞ —Å–µ–≥–º–µ–Ω—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
  if (slug.length === 2) {
    const categoryData = await fetchCategoryWithChildren(apolloClient, slug[1])
    if (categoryData) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:', categoryData.name)
      return <CategoryPage categoryData={categoryData} />
    }
  }

  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç (—Ç—Ä–∏ —Å–µ–≥–º–µ–Ω—Ç–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è/–ø–æ—Å—Ç)
  if (slug.length === 3) {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç:', slug[0], slug[1], slug[2])
    // slug[0] = projects (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    // slug[1] = cinema (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    // slug[2] = life (slug –ø–æ—Å—Ç–∞)
    return <CategoryPostPage category={slug[1]} slug={slug[2]} />
  }

  console.log('‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
  notFound()
}

export default DynamicPage

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
export async function generateStaticParams() {
  const apolloClient = getClient()

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã WordPress
    const { fetchAllPages } = await import('@/services/pagesService')
    const pages = await fetchAllPages(apolloClient)

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await fetchAllCategories(apolloClient)

    const paths: Array<{ slug: string[] }> = []

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã WordPress (–∏—Å–∫–ª—é—á–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∏ projects)
    const filteredPages = pages.filter((page) => {
      if (
        !page.slug ||
        page.slug === 'home' ||
        page.slug === 'glavnaya' ||
        page.slug === 'projects' ||
        page.slug === ''
      ) {
        return false
      }
      return true
    })

    filteredPages.forEach((page) => {
      paths.push({ slug: [page.slug] })
    })

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories.forEach(({ node: category }) => {
      paths.push({ slug: [category.slug] })
    })

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ—Å—Ç—ã
    // –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    console.log(
      '‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:',
      paths.map((p) => p.slug.join('/')),
    )
    return paths
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:', error)
    return []
  }
}
